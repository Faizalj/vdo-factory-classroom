{
  "name": "Full supabase 1.3 overlay",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        540,
        1660
      ],
      "id": "dcd63808-69bb-4657-896c-eb43641a89eb",
      "name": "Limit"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -260,
        2180
      ],
      "id": "ff3a3799-65b2-47d6-9d6f-2d1bb1d86796",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/storage/{{ $('Start generating TTS (chatterbox)').item.json.file_id }}/status",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1400,
        2160
      ],
      "id": "7eb65010-ef6d-43eb-879e-86471c02bd8b",
      "name": "Get status of TTS generation",
      "retryOnFail": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "ready",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "91402596-3978-4dfc-91b7-9ffe3521b862"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ready"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0c29765e-4213-434c-9bf3-c5e854dd6ee8",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "processing",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "processing"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a6cfd86-e690-417e-aa6d-ae497e1177ae",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "not_found",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1560,
        2160
      ],
      "id": "d6063e20-f3ef-4ca9-88ed-b53877fb3245",
      "name": "TTS status switch"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/video-tools/generate/tts-captioned-video",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "specifyBody": "string",
        "body": "={{ \n\n[\n  `background_id=${$('Upload image to server').item.json.file_id}`,\n  $json.tts_audio_id ? `audio_id=${$json.tts_audio_id}` : false,\n  $json.tts_audio_id ? '' : `text=${encodeURIComponent($('Loop Over Items').item.json.text)}`,\n  $json.tts_audio_id ? '' :  `kokoro_voice=${$('Configure me').item.json.kokoro_voice}`,\n  $json.tts_audio_id ? '' : `kokoro_speed=${$('Configure me').item.json.kokoro_speed}`\n].filter(Boolean).join('&') \n\n}}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2280,
        2020
      ],
      "id": "abf020b1-be1f-4bb4-be96-9f16d89b6a84",
      "name": "Start generating captioned TTS video"
    },
    {
      "parameters": {
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/storage/{{ $('Start generating captioned TTS video').item.json.file_id }}/status",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2700,
        2020
      ],
      "id": "7c2bf8fa-ec9f-4d01-bdc7-b7ca9b09a10d",
      "name": "Get video generation status",
      "retryOnFail": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "ready",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "91402596-3978-4dfc-91b7-9ffe3521b862"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ready"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0c29765e-4213-434c-9bf3-c5e854dd6ee8",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "processing",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "processing"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a6cfd86-e690-417e-aa6d-ae497e1177ae",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "not_found",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2880,
        2020
      ],
      "id": "9cf303ea-2cc2-4722-a853-7772196712bb",
      "name": "Video generation switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a7fdacca-749e-4f69-84fd-50075e0e3409",
              "name": "video_id",
              "value": "={{ $('Start generating captioned TTS video').item.json.file_id }}",
              "type": "string"
            },
            {
              "id": "6c99c267-5c41-4697-ba19-b51d9e8c9a4e",
              "name": "tts_id",
              "value": "={{ $('Global TTS audio id').item.json.tts_audio_id }}",
              "type": "string"
            },
            {
              "id": "21dd08a7-f785-4829-8609-a99950f21572",
              "name": "image_id",
              "value": "={{ $('Upload image to server').item.json.file_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3140,
        2220
      ],
      "id": "0f92860c-1555-481b-8819-ae114f35db7c",
      "name": "Setup media fields"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        120,
        2560
      ],
      "id": "931e9d39-558a-4dfc-bdca-a8018b8b0c52",
      "name": "Combine loop items"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/video-tools/merge",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "video_ids",
              "value": "={{ $json.data.map(item => item.video_id).join(',') }}"
            },
            {
              "name": "background_music_id",
              "value": "={{ $('Configure me').item.json.background_music_id }}"
            },
            {
              "name": "background_music_volume",
              "value": "={{ $('Configure me').item.json.background_music_volume }}"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        2560
      ],
      "id": "69d713f3-913f-4c2e-b99a-adfd4f6452ab",
      "name": "Start merging the videos"
    },
    {
      "parameters": {
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/storage/{{ $('Start merging the videos').item.json.file_id }}/status",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        740,
        2560
      ],
      "id": "f2879967-d8d3-4334-a2f4-1b88ed4ca877",
      "name": "Get status of the video merge"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "ready",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "91402596-3978-4dfc-91b7-9ffe3521b862"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ready"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0c29765e-4213-434c-9bf3-c5e854dd6ee8",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "processing",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "processing"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a6cfd86-e690-417e-aa6d-ae497e1177ae",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "not_found",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        920,
        2560
      ],
      "id": "c9c1de0a-36f6-4d0b-b461-c38dd6ec23e7",
      "name": "Video merge status switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "13b0dde8-b067-41d2-b7c2-fa5addf56a25",
              "name": "download_url",
              "value": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/storage/{{ $('Start adding overlay to thevideo').item.json.file_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3100,
        3420
      ],
      "id": "cb678797-dae6-4426-b0dd-cbb72f543c44",
      "name": "Setup final video download URL"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1220,
        2160
      ],
      "id": "ab9f8ec3-15df-4c73-93e2-5f898b946956",
      "name": "Wait until the TTS gets generated",
      "webhookId": "b8e7d73d-48db-4ab9-a803-a8dd741a2f07"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/audio-tools/tts/chatterbox",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $('Loop Over Items').item.json.text }}"
            },
            {
              "name": "sample_audio_id",
              "value": "={{ $('Configure me').item.json.chatterbox_clone_voice_id ?? '' }}"
            },
            {
              "name": "exaggeration",
              "value": "={{ $('Configure me').item.json.chatterbox_exaggeration }}"
            },
            {
              "name": "cfg_weight",
              "value": "={{ $('Configure me').item.json.chatterbox_cfg_weight }}"
            },
            {
              "name": "temperature",
              "value": "={{ $('Configure me').item.json.chatterbox_temperature }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1040,
        2160
      ],
      "id": "817edecf-0716-494e-8985-86b9dae39ad7",
      "name": "Start generating TTS (chatterbox)"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2480,
        2020
      ],
      "id": "31558290-475c-45a1-8aa8-3025c4c4f834",
      "name": "Wait until the video gets generated",
      "webhookId": "59c31587-ce2b-487e-92ff-139762eec0f0"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        540,
        2560
      ],
      "id": "a6f1ea85-1846-4291-9560-10d8585dbb9e",
      "name": "Wait until the videos gets merged together",
      "webhookId": "d19a4af3-3180-464e-8f91-6508dc3b76af"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Configure me').item.json.tts_engine }}",
                    "rightValue": "kokoro",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "5ae108d7-13b2-41aa-ab18-45a80515ad51"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "kokoro"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a3dbceb9-96f7-4f78-b5e4-81bd6cb9a422",
                    "leftValue": "={{ $('Configure me').item.json.tts_engine }}",
                    "rightValue": "chatterbox",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "chatterbox"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        820,
        2040
      ],
      "id": "6c603b12-5ccd-4cc8-b145-de2f9af0fd68",
      "name": "TTS switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d41f1ef6-7591-41b7-805d-94b58caba5c4",
              "name": "tts_audio_id",
              "value": "={{ $('Start generating TTS (chatterbox)').item.json.file_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1820,
        2140
      ],
      "id": "eef5f2fc-14e6-436e-a8a6-f6cb0816ed5c",
      "name": "Setup TTS file_id"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "87d65a77-d25e-42b2-86ac-7b1c4efb2990",
              "name": "text",
              "value": "={{ $json.text.includes(\"<think>\") ? $json.text.split(\"</think>\")[1].trim() : $json.text.trim() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1400,
        1540
      ],
      "id": "1d48bc9b-37be-4ed1-8b78-922596b95cdc",
      "name": "Cleanup text"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1220,
        1720
      ],
      "id": "55b5a014-6490-45dc-8541-4761e238c7b2",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "AA65xz9Vi0Pnrj5E",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "68de9e0e-e234-4509-a57a-4c4c42590620",
              "name": "tts_audio_id",
              "value": "={{ $json.tts_audio_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2100,
        2020
      ],
      "id": "2f2f9a9a-0e9a-44c7-8ffe-e36e02762efb",
      "name": "Global TTS audio id"
    },
    {
      "parameters": {
        "content": "# 4. Pick a story ⚠️\n\n⚠️ set credentials in the  Supabase node and select \nthe right database",
        "height": 400,
        "width": 980
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        1440
      ],
      "id": "7e574f98-09cd-42eb-a492-d300e00b4dfb",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "# 5. Create script from the story",
        "height": 400,
        "width": 880
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1040,
        1440
      ],
      "id": "9e546ab0-53fa-4302-b89c-802931a0e293",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# 9. Merge the videos",
        "height": 360,
        "width": 1180
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        20,
        2440
      ],
      "id": "c3eb5a66-9f54-4443-ac17-b8a72f5349b8",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "# 7. Create speech from text",
        "height": 520,
        "width": 1200
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        780,
        1880
      ],
      "id": "e970bcea-d8da-43ce-a576-bc8a4e77ed31",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "# 8. Generate captioned video",
        "height": 520,
        "width": 1240
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2040,
        1880
      ],
      "id": "196f164d-0e9b-4776-8c65-cb5735a5b1c5",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "# 10. Save to the database ⚠️\n\n⚠️ set credentials in the Supabase node and select \nthe right database",
        "height": 360,
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2620,
        2440
      ],
      "id": "1eae9866-e414-496f-83cc-8eb56f4425a1",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "url": "={{ $('Setup final video download URL').item.json.download_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3500,
        3420
      ],
      "id": "69d3415b-62b5-4a5e-bad0-317e3a74689e",
      "name": "Download the video"
    },
    {
      "parameters": {
        "text": "=<Instructions>\nBreak up the text to multiple chunks that I can use for generating a youtube video, and for each chunk add an image generation prompt.\n\nAlso create a title and a description for the video.\n\nUse the following art style for the image prompts:\n\nArt style:\n{{ $('Configure me').item.json.art_style }}\n\nFormat the response to include all required fields: scenes, title, description, and tags.\n\n</Instructions>\n\n<Text>\n{{ $json.text }}\n</Text>\n\n/nothink",
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"scenes\": {\n            \"type\": \"array\",\n            \"description\": \"user name\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"text\": {\n                        \"type\": \"string\",\n                        \"description\": \"the text of the scene, it will be used for TTS\"\n                    },\n                    \"image_prompt\": {\n                        \"type\": \"string\",\n                        \"description\": \"prompt for image generation\"\n                    }\n                },\n                \"required\": [\n                    \"text\",\n                    \"image_prompt\"\n                ]\n            }\n        },\n        \"title\": {\n            \"type\": \"string\",\n            \"description\": \"the title of the youtube video\"\n        },\n        \"description\": {\n            \"type\": \"string\",\n            \"description\": \"the description of the youtube video\"\n        },\n        \"tags\": {\n            \"type\": \"array\",\n            \"description\": \"tags for sharing the video on youtube\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        }\n    },\n    \"required\": [\n        \"scenes\",\n        \"title\",\n        \"description\",\n        \"tags\"\n    ]\n}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.1,
      "position": [
        1560,
        1540
      ],
      "id": "4558ed17-2572-43e5-8662-2f96e181e148",
      "name": "Create the script"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<Instructions>\nUsing the below content, create 10s-60s long {{ $('Configure me').item.json.content_type }}.\nThe generated script will be used in a YouTube video. the script sould have hook and call to action (CTA)\nReturn clear text, no markdowns or any other styling is needed.\n</Instructions>\n\n<Post>\n{{ $('Limit').item.json.title }}\n\n{{ $('Limit').item.json.content }}\n</Post>\n\n/nothink",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1100,
        1540
      ],
      "id": "092df90f-08b3-4569-b4d7-abfe50fede60",
      "name": "Create the motivational speech"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.scenes",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1720,
        1700
      ],
      "id": "b7098c84-706f-4ccf-83cf-eba3bf128204",
      "name": "Split Out"
    },
    {
      "parameters": {
        "content": "# 11. Upload to YouTube ⚠️\n\n⚠️ set the credentials in the `Start Youtube upload` and the `Upload video to YouTube` nodes",
        "height": 360,
        "width": 880,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3040,
        3300
      ],
      "id": "bb392168-52d5-434a-bfa8-c87946591fe9",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://www.googleapis.com/upload/youtube/v3/videos?part=snippet,status&uploadType=resumable",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "youTubeOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Upload-Content-Type",
              "value": "video/mp4"
            }
          ]
        },
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "RAW/JSON",
        "body": "={\n  \"snippet\": {\n    \"title\": \"{{ $('Create the script').item.json.output.title }}\",\n    \"description\": \"{{ $('Create the script').item.json.output.description }}\",\n    \"tags\": \"\",\n    \"categoryId\": \"24\",\n    \"defaultLanguage\": \"en\",\n    \"defaultAudioLanguage\": \"en\"\n  },\n  \"status\": {\n    \"privacyStatus\": \"public\",\n    \"license\": \"youtube\",\n    \"embeddable\": true,\n    \"publicStatsViewable\": true,\n    \"madeForKids\": false\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "d768894a-13a0-4c1f-827a-d033b7d2878d",
      "name": "Start Youtube upload",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        3320,
        3420
      ],
      "disabled": true
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $('Download the video').item.json.headers.location }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "youTubeOAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "video/mp4"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {}
      },
      "id": "0057cc25-9727-4a39-bf2f-eec0a2533529",
      "name": "Upload video to YouTube",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        3700,
        3420
      ],
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7bbb518a-c4f1-49a5-9e72-3e9d939b131b",
              "name": "vdo_factory_api_url",
              "value": "https://vdo-factory.builderwithai.com",
              "type": "string"
            },
            {
              "id": "485a5788-cda6-4015-aa8d-d7b7ff012266",
              "name": "subreddit",
              "value": "selfimprovement",
              "type": "string"
            },
            {
              "id": "afa3df27-f529-452f-8976-63a0af466584",
              "name": "content_type",
              "value": "motivational speech",
              "type": "string"
            },
            {
              "id": "ddd725fb-b9f6-45d6-90df-88c50ba53a20",
              "name": "art_style",
              "value": "=Use the following prompt as a template for the image generation prompt, use the content to create a unique image for the scene.\n\nCreate a cinematic image in a dramatic, high-contrast photographic style, with a cool blue color grading. The subject is a figure [doing something, like walking under a waterfall, sitting under a tree, watching the sunset, whatever makes sense from the content's perspective], captured from a distance. The foreground should be softly blurred to focus attention on the landscape details. The mood should convey strength, wisdom, and a sense of calm determination. The overall visual should feel inspirational and dignified, resembling a powerful nature documentary scene.",
              "type": "string"
            },
            {
              "id": "79226bcb-3a26-4d30-b3a3-e578cda677f9",
              "name": "postiz_api_url",
              "value": "https://postiz.com/api/public/v1",
              "type": "string"
            },
            {
              "id": "940d954d-74de-455b-a85d-16827783fe30",
              "name": "tts_engine",
              "value": "kokoro",
              "type": "string"
            },
            {
              "id": "16d582b3-84bf-4b2c-89fa-30603ee6e0e2",
              "name": "background_music_id",
              "value": "",
              "type": "string"
            },
            {
              "id": "34f8b468-b669-46ed-be9d-e77e15f36380",
              "name": "background_music_volume",
              "value": 0.2,
              "type": "number"
            },
            {
              "id": "7ab1a1b1-702e-40a5-a6fb-800feb4d8531",
              "name": "generate_content",
              "value": "ai",
              "type": "string"
            },
            {
              "id": "1be1b5e1-1baf-4f21-8309-c02aa1437ef9",
              "name": "update_stories",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "a7b1dd3c-0109-4f88-89f9-f236e6bea8f7",
              "name": "kokoro_voice",
              "value": "af_heart",
              "type": "string"
            },
            {
              "id": "5a691031-4de0-4791-821d-4dec80388969",
              "name": "kokoro_speed",
              "value": 1,
              "type": "number"
            },
            {
              "id": "a725aaf1-c91e-4d5b-87f9-d540d309098c",
              "name": "chatterbox_exaggeration",
              "value": 0.5,
              "type": "number"
            },
            {
              "id": "d048e31d-f1cb-48ac-9ff2-13f1028c843e",
              "name": "chatterbox_cfg_weight",
              "value": 0.5,
              "type": "number"
            },
            {
              "id": "96943158-11f6-4731-9d4b-dbae0862d7ab",
              "name": "chatterbox_temperature",
              "value": 0.8,
              "type": "number"
            },
            {
              "id": "15051422-f020-4a19-a2bd-6a67e93af778",
              "name": "chatterbox_clone_voice_id",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        120,
        1020
      ],
      "id": "48006223-f7fd-4e75-8aa2-206ed92a38af",
      "name": "Configure me"
    },
    {
      "parameters": {
        "content": "# Configure me ⚠️\n",
        "height": 520,
        "width": 300,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        900
      ],
      "id": "b74d5767-f5b4-4ec5-a71b-14474d4315b4",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9aa0ae35-303b-40f5-8556-2af39e621abf",
              "leftValue": "={{ $('Limit').item.json.keys().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        660,
        1660
      ],
      "id": "6ef8edfc-e21e-4cbb-acc2-82f79de19e08",
      "name": "If"
    },
    {
      "parameters": {
        "errorMessage": "No more stories! Please download more"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        840,
        1500
      ],
      "id": "98622fec-9bea-41b0-8573-4b5c0a9b3da7",
      "name": "No more stories"
    },
    {
      "parameters": {
        "url": "={{ $json.vdo_factory_api_url }}/health",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        460,
        1000
      ],
      "id": "45f49e0f-0cb3-4d50-bc5b-4640d781d8e5",
      "name": "HTTP Request",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "errorMessage": "The server is not running or isn't configured"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        460,
        1260
      ],
      "id": "91e4dcce-5d1f-4cc7-ab6c-6dbf5e8491ec",
      "name": "Server isn't ready"
    },
    {
      "parameters": {
        "content": "# Test connection",
        "height": 520,
        "width": 360
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        340,
        900
      ],
      "id": "edfb99d2-fb0b-4de6-8737-aecff7f146ad",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "content": "# cleanup (removing tmp files)\nif you want to delete the generated video too, add it's id to the array",
        "height": 360,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3980,
        3080
      ],
      "id": "6a46beb3-0cee-4fdc-baa0-fa1d9985b435",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "27bcaf96-fcaa-41cb-8a51-436870ce2110",
              "name": "file_ids",
              "value": "={{ [...$('Combine loop items').item.json.data.map(item => [item.video_id, item.tts_id, item.image_id]).flat(), $('Configure me').item.json.chatterbox_clone_voice_id, $('Configure me').item.json.background_music_id].filter(Boolean) }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4020,
        3200
      ],
      "id": "3c2d0175-c5c7-4d29-a3b6-356e7afd7698",
      "name": "Set file ids to delete"
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/storage/{{ $json.file_ids }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4340,
        3200
      ],
      "id": "565b8cb9-0f0c-4c45-8c02-b7a5427f1319",
      "name": "Delete tmp files"
    },
    {
      "parameters": {
        "fieldToSplitOut": "file_ids",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        4180,
        3200
      ],
      "id": "1a325429-4435-47ea-b891-37c5c0c4d189",
      "name": "For each file"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "motivation_hub",
        "limit": 1,
        "filterType": "string",
        "filterString": "video_id=is.null"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        420,
        1660
      ],
      "id": "7032fd91-976c-4f4a-b94e-1dfc93982587",
      "name": "Get row for processing",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "MjvtAjWTwzxms326",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "motivation_hub",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Limit').item.json.id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "video_id",
              "fieldValue": "={{ $('Start merging the videos').item.json.file_id }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "generated"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2760,
        2620
      ],
      "id": "649fe7ca-d7f0-44b1-9973-2291a05778f6",
      "name": "Save video id to the db",
      "credentials": {
        "supabaseApi": {
          "id": "MjvtAjWTwzxms326",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "# 12. Schedule with Postiz ⚠️\n\n⚠️ Set your Postiz API credentials in the HTTP Header Auth",
        "height": 820,
        "width": 880,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3040,
        2440
      ],
      "id": "b57d7b36-93a8-4f45-afb9-c03760c23216",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/storage/{{ $('Start merging the videos').item.json.file_id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3140,
        2560
      ],
      "id": "c91f5f1e-57a1-48ec-af7e-92cd3a06ee06",
      "name": "Download the video for Postiz"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure me').item.json.postiz_api_url }}/upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3360,
        2560
      ],
      "id": "57e7dcb9-15aa-46cc-a55c-e163fe52bb67",
      "name": "Upload video to Postiz"
    },
    {
      "parameters": {
        "url": "={{ $('Configure me').item.json.postiz_api_url }}/integrations",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3580,
        2560
      ],
      "id": "225c7d9f-c89a-4a35-8527-dbd4833f1550",
      "name": "Get Postiz integrations"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        3760,
        2560
      ],
      "id": "e82f38dc-7659-4421-a0a0-3d3f2a8172a8",
      "name": "Merge integrations"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1f7adeed-3cd0-47bb-8bf5-5887d2c82cad",
              "name": "postiz_integration_id",
              "value": "={{ $json.data.find(integration => integration.identifier === 'youtube')?.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3120,
        3040
      ],
      "id": "a602e913-555d-4a65-aa31-99d3fbe07ab9",
      "name": "Set integration id for YouTube"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure me').item.json.postiz_api_url }}/posts",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"type\": \"schedule\",\n  \"date\": \"{{ $now.plus(1, 'days').toISO() }}\",\n  \"tags\": [],\n  \"shortLink\": false,\n  \"posts\": [\n    {\n      \"integration\": {\n        \"id\": \"{{ $json.postiz_integration_id }}\"\n      },\n      \"value\": [\n        {\n          \"content\": \"{{ $('Create the script').item.json.output.description }}\",\n          \"image\": [\n            {\n              \"id\": \"{{ $('Upload video to Postiz').item.json.id }}\",\n              \"path\": \"{{ $('Upload video to Postiz').item.json.path }}\"\n            }\n          ]\n        }\n      ],\n      \"settings\": {\n      \"title\": \"{{ $('Create the script').item.json.output.title }}\",\n      \"type\": \"unlisted\",\n      \"tags\": {{ JSON.stringify($('Create the script').item.json.output.tags.map(tag => ({ value: tag, label: tag }))) }}\n  }\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3660,
        3040
      ],
      "id": "794fdd4b-2afb-47f9-ab49-8532f79fa9c3",
      "name": "Schedule YouTube video"
    },
    {
      "parameters": {
        "content": "# Setup the integration\n\nYou should implement your own logic here.\n\n1. You can hard-code the desired integration id\n2. You can filter the integrations by your own logic\n\nMake sure to modify the `settings` field if you are sharing to other platforms than YouTube",
        "height": 500,
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3080,
        2740
      ],
      "id": "0d64bf8a-dfe9-4a09-876e-a22b9e257616",
      "name": "Sticky Note1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -260,
        940
      ],
      "id": "9d680c27-736f-473a-af88-c5f779535799",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.together.xyz/v1/images/generations",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "black-forest-labs/FLUX.1-schnell-Free"
            },
            {
              "name": "prompt",
              "value": "={{ $json.image_prompt }}"
            },
            {
              "name": "width",
              "value": "={{ 720 }}"
            },
            {
              "name": "height",
              "value": "={{ 1280 }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        120,
        2080
      ],
      "id": "61c68251-0852-4e69-a97a-2891536d3f32",
      "name": "Generate AI image",
      "alwaysOutputData": false,
      "credentials": {
        "httpBearerAuth": {
          "id": "moweCBk6GwTWmnub",
          "name": "Together AI test"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/storage",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $json.data[0].url }}"
            },
            {
              "name": "media_type",
              "value": "image"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        1960
      ],
      "id": "c78635e1-9b69-4129-a337-b2fb3f8d6764",
      "name": "Upload image to server",
      "retryOnFail": true
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        440,
        2200
      ],
      "id": "c98d021e-5868-48a1-ac7a-d4373dd77add",
      "name": "Wait for the error / rate limit to go away",
      "webhookId": "b439a270-d0cb-4fa1-8904-0d497766913a"
    },
    {
      "parameters": {
        "content": "# 6. Generate an image with Flux ⚠️\n\n⚠️ Set your Together AI API credentials",
        "height": 520,
        "width": 680
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        1880
      ],
      "id": "c5aacffc-76a5-489e-b621-325fe321f60f",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        260,
        1660
      ],
      "id": "31c024c0-d743-4660-8f14-6a357756f595",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "motivation_hub",
        "limit": 1,
        "filterType": "string",
        "filterString": "video_id=is.null"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        100,
        1660
      ],
      "id": "63496662-7b31-48db-a312-782e0c2f3147",
      "name": "Check if data exists1",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "MjvtAjWTwzxms326",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -260,
        1180
      ],
      "id": "cb0f594a-a347-4877-9fde-fce51af59aba",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "channel_name",
              "name": "channel_name",
              "value": "Motivation Hub",
              "type": "string"
            },
            {
              "id": "supabase_table",
              "name": "supabase_table",
              "value": "motivation_hub",
              "type": "string"
            },
            {
              "id": "content_categories",
              "name": "content_categories",
              "value": [
                "daily motivation and inspiration",
                "personal development",
                "goal setting and achievement",
                "overcoming challenges",
                "success stories and lessons",
                "mindset transformation",
                "self-confidence building",
                "productivity and focus",
                "resilience and perseverance",
                "positive thinking"
              ],
              "type": "array"
            },
            {
              "id": "content_types",
              "name": "content_types",
              "value": [
                "motivational speech",
                "inspirational story",
                "success tip",
                "mindset shift",
                "life lesson",
                "daily reminder",
                "actionable advice"
              ],
              "type": "array"
            },
            {
              "id": "target_audience",
              "name": "target_audience",
              "value": "Young professionals, students, and anyone seeking motivation and personal growth",
              "type": "string"
            },
            {
              "id": "content_language",
              "name": "content_language",
              "value": "English",
              "type": "string"
            },
            {
              "id": "content_style",
              "name": "content_style",
              "value": "uplifting, empowering, practical, and action-oriented",
              "type": "string"
            },
            {
              "id": "content_length",
              "name": "content_length",
              "value": "60-90 seconds when spoken",
              "type": "string"
            },
            {
              "id": "batch_size",
              "name": "batch_size",
              "value": 5,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -100,
        160
      ],
      "id": "5f838421-342d-4cf3-b4d2-bfd9cbd82f9a",
      "name": "Channel Configuration"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "You are an expert content creator specializing in engaging YouTube content. You understand both Thai and international audiences and can create content that resonates with specific target demographics.",
              "role": "system"
            },
            {
              "content": "={{ 'Create ' + $('Channel Configuration').item.json.batch_size + ' different compelling YouTube video content pieces for the channel: ' + $('Channel Configuration').item.json.channel_name + '\\n\\n' + 'Channel Focus: ' + $('Channel Configuration').item.json.content_categories.join(', ') + '\\n' + 'Content Types: ' + $('Channel Configuration').item.json.content_types.join(', ') + '\\n' + 'Target Audience: ' + $('Channel Configuration').item.json.target_audience + '\\n' + 'Content Style: ' + $('Channel Configuration').item.json.content_style + '\\n' + 'Video Length: ' + $('Channel Configuration').item.json.content_length + '\\n\\n' + 'Requirements:\\n' + '- Create ' + $('Channel Configuration').item.json.batch_size + ' unique video concepts\\n' + '- Each should have strong YouTube appeal (clickable titles)\\n' + '- Content should be practical and engaging\\n' + '- Consider trending topics in tech/digital space\\n' + '- Make titles SEO-friendly for YouTube search\\n' + '- Include clear value proposition in each video\\n\\n' + 'Format your response exactly as:\\n\\n' + 'VIDEO_1:\\n' + 'TITLE: [Compelling YouTube video title with strong hook]\\n' + 'CONTENT: [Complete video script with clear structure: intro hook, main content, conclusion]\\n\\n' + 'VIDEO_2:\\n' + 'TITLE: [Next video title]\\n' + 'CONTENT: [Next video script]\\n\\n' + 'Continue for all ' + $('Channel Configuration').item.json.batch_size + ' videos' }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        0,
        0
      ],
      "id": "c5ccbbdf-6281-4055-8b13-d2dcf1dcd3c9",
      "name": "Generate Video Content",
      "credentials": {
        "openAiApi": {
          "id": "AA65xz9Vi0Pnrj5E",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ทำความสะอาด content ก่อน\nconst rawContent = $input.first().json.message.content;\nconst cleanedContent = rawContent\n  .replace(/\\*/g, '')    // ลบเฉพาะ * ตัวเดียว\n  .trim();               // ตัด space หน้า-หลัง\n\n// ดึงข้อมูล channel จาก config\nconst channelConfig = $('Channel Configuration').item.json;\n\n// Split เป็นแต่ละวิดีโอ\nconst videoPieces = cleanedContent.split(/VIDEO_\\d+:/i);\nconst results = [];\n\nvideoPieces.forEach((piece, index) => {\n  if (piece.trim() && index > 0) { // skip first empty piece\n    // Parse แต่ละวิดีโอ\n    const titleMatch = piece.match(/TITLE:\\s*([^\\n]*)/i);\n    const contentMatch = piece.match(/CONTENT:\\s*([\\s\\S]*?)(?=VIDEO_|$)/i);\n    \n    const title = titleMatch ? titleMatch[1].trim() : `Video Content ${index}`;\n    const content = contentMatch ? contentMatch[1].trim().replace(/\\\\n/g, '\\n') : '';\n    \n    // คำนวณ word count (ประมาณ)\n    const wordCount = content.split(' ').filter(word => word.length > 0).length;\n    \n    results.push({\n      title: title,\n      content: content,\n      status: 'draft',\n      channel_id: channelConfig.channel_id,\n      channel_name: channelConfig.channel_name,\n      word_count: wordCount,\n      estimated_duration_seconds: Math.round(wordCount * 0.5), // Thai content speaks slower\n      created_at: new Date().toISOString()\n    });\n  }\n});\n\n// Return array of items\nreturn results.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        260
      ],
      "id": "9e497336-1ae1-492a-ac6d-0867f1728f83",
      "name": "Parse Video Content"
    },
    {
      "parameters": {
        "tableId": "={{ $('Channel Configuration').item.json.supabase_table }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "title",
              "fieldValue": "={{ $json.title }}"
            },
            {
              "fieldId": "content",
              "fieldValue": "={{ $json.content }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "={{ $json.status }}"
            },
            {
              "fieldId": "word_count",
              "fieldValue": "={{ $json.word_count }}"
            },
            {
              "fieldId": "estimated_duration_seconds",
              "fieldValue": "={{ $json.estimated_duration_seconds }}"
            },
            {
              "fieldId": "created_at",
              "fieldValue": "={{ $json.created_at }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        500,
        160
      ],
      "id": "448c7ec2-3b99-4299-a53a-dc2f896ecd8e",
      "name": "Save to Channel Table",
      "credentials": {
        "supabaseApi": {
          "id": "MjvtAjWTwzxms326",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        700,
        160
      ],
      "id": "c206d161-c6e4-4913-9876-c54e87a6619d",
      "name": "Aggregate Results"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "summary",
              "name": "summary",
              "value": "={{ '🎬 Video Content Generation Complete!\\n\\n' + '📺 Channel: ' + $('Channel Configuration').item.json.channel_name + '\\n' + '📊 Table: ' + $('Channel Configuration').item.json.supabase_table + '\\n' + '🌐 Language: ' + $('Channel Configuration').item.json.content_language + '\\n' + '📝 Generated: ' + $('Aggregate Results').item.json.data.length + ' video scripts\\n' + '⏱️ Total Duration: ~' + Math.round($('Aggregate Results').item.json.data.reduce((sum, item) => sum + (item.estimated_duration_seconds || 0), 0) / 60) + ' minutes of content\\n\\n' + '📋 Generated Video Titles:\\n' + $('Aggregate Results').item.json.data.map((item, index) => (index + 1) + '. ' + item.title).join('\\n') + '\\n\\n' + '✅ All content saved with status: draft\\n' + '🔄 Ready for video generation workflow!' }}",
              "type": "string"
            },
            {
              "id": "total_videos",
              "name": "total_videos",
              "value": "={{ $('Aggregate Results').item.json.data.length }}",
              "type": "number"
            },
            {
              "id": "channel_info",
              "name": "channel_info",
              "value": "={{ { channel_name: $('Channel Configuration').item.json.channel_name, table_name: $('Channel Configuration').item.json.supabase_table, language: $('Channel Configuration').item.json.content_language } }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        900,
        160
      ],
      "id": "60b114c3-1b10-42ed-95e7-eedfb7377cca",
      "name": "Create Channel Report"
    },
    {
      "parameters": {
        "content": "",
        "width": 2040,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -420,
        480
      ],
      "id": "89fae95d-9236-4f3c-8c7d-e1d0bd629915",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/storage",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "=data"
            },
            {
              "name": "media_type",
              "value": "video"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1500,
        2600
      ],
      "id": "47556d8f-c236-475d-a6ce-69c523a841bd",
      "name": "Upload overlay to the server"
    },
    {
      "parameters": {
        "url": "https://github.com/gyoridavid/ai_agents_az/raw/refs/heads/main/episode_16/overlay_black.mp4",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1320,
        2600
      ],
      "id": "73b7fa19-0f4d-46e3-8199-3964c2cd77ff",
      "name": "Download example overlay"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1900,
        2600
      ],
      "id": "267dcad0-6386-41a1-b48f-58cdf05bb0fb",
      "name": "Wait until the videos gets merged together1",
      "webhookId": "45e34b4e-d518-47e5-808d-bdfb17b40c3b"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/video-tools/add-colorkey-overlay",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "video_id",
              "value": "={{ $('Start merging the videos').item.json.file_id }}"
            },
            {
              "name": "overlay_video_id",
              "value": "={{ $('Upload overlay to the server').item.json.file_id }}"
            },
            {
              "name": "color",
              "value": "#000000"
            }
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1680,
        2600
      ],
      "id": "8130f16b-f261-48c2-a728-2918742aeaba",
      "name": "Start adding overlay to thevideo"
    },
    {
      "parameters": {
        "url": "={{ $('Configure me').item.json.vdo_factory_api_url }}/api/v1/media/storage/{{ $('Start adding overlay to thevideo').item.json.file_id }}/status",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2100,
        2600
      ],
      "id": "1394b92d-6f29-4c9d-b155-0b61b368ad25",
      "name": "Get status of the overlay"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "ready",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "91402596-3978-4dfc-91b7-9ffe3521b862"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "ready"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0c29765e-4213-434c-9bf3-c5e854dd6ee8",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "processing",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "processing"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a6cfd86-e690-417e-aa6d-ae497e1177ae",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "not_found",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "failed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2340,
        2640
      ],
      "id": "e325d973-6801-4d2c-b19a-c84cf20c24a1",
      "name": "Overlay status"
    },
    {
      "parameters": {
        "content": "# Add overlay",
        "height": 360,
        "width": 1320,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1260,
        2440
      ],
      "id": "627dd560-5c75-4f85-a184-be668c1439e2",
      "name": "Sticky Note10"
    }
  ],
  "pinData": {},
  "connections": {
    "Limit": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Combine loop items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate AI image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get status of TTS generation": {
      "main": [
        [
          {
            "node": "TTS status switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TTS status switch": {
      "main": [
        [
          {
            "node": "Setup TTS file_id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait until the TTS gets generated",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start generating TTS (chatterbox)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start generating captioned TTS video": {
      "main": [
        [
          {
            "node": "Wait until the video gets generated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get video generation status": {
      "main": [
        [
          {
            "node": "Video generation switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video generation switch": {
      "main": [
        [
          {
            "node": "Setup media fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait until the video gets generated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup media fields": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine loop items": {
      "main": [
        [
          {
            "node": "Start merging the videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start merging the videos": {
      "main": [
        [
          {
            "node": "Wait until the videos gets merged together",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get status of the video merge": {
      "main": [
        [
          {
            "node": "Video merge status switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video merge status switch": {
      "main": [
        [
          {
            "node": "Download example overlay",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait until the videos gets merged together",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup final video download URL": {
      "main": [
        [
          {
            "node": "Start Youtube upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait until the TTS gets generated": {
      "main": [
        [
          {
            "node": "Get status of TTS generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start generating TTS (chatterbox)": {
      "main": [
        [
          {
            "node": "Wait until the TTS gets generated",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait until the video gets generated": {
      "main": [
        [
          {
            "node": "Get video generation status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait until the videos gets merged together": {
      "main": [
        [
          {
            "node": "Get status of the video merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TTS switch": {
      "main": [
        [
          {
            "node": "Global TTS audio id",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Start generating TTS (chatterbox)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup TTS file_id": {
      "main": [
        [
          {
            "node": "Global TTS audio id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanup text": {
      "main": [
        [
          {
            "node": "Create the script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Create the motivational speech",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Create the script",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Global TTS audio id": {
      "main": [
        [
          {
            "node": "Start generating captioned TTS video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download the video": {
      "main": [
        [
          {
            "node": "Upload video to YouTube",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create the script": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create the motivational speech": {
      "main": [
        [
          {
            "node": "Cleanup text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload video to YouTube": {
      "main": [
        [
          {
            "node": "Set file ids to delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure me": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "No more stories",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create the motivational speech",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Check if data exists1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Server isn't ready",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set file ids to delete": {
      "main": [
        [
          {
            "node": "For each file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For each file": {
      "main": [
        [
          {
            "node": "Delete tmp files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row for processing": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save video id to the db": {
      "main": [
        [
          {
            "node": "Setup final video download URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download the video for Postiz": {
      "main": [
        [
          {
            "node": "Upload video to Postiz",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload video to Postiz": {
      "main": [
        [
          {
            "node": "Get Postiz integrations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Postiz integrations": {
      "main": [
        [
          {
            "node": "Merge integrations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge integrations": {
      "main": [
        [
          {
            "node": "Set integration id for YouTube",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set integration id for YouTube": {
      "main": [
        [
          {
            "node": "Schedule YouTube video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule YouTube video": {
      "main": [
        [
          {
            "node": "Setup final video download URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Configure me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI image": {
      "main": [
        [
          {
            "node": "Upload image to server",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait for the error / rate limit to go away",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload image to server": {
      "main": [
        [
          {
            "node": "TTS switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for the error / rate limit to go away": {
      "main": [
        [
          {
            "node": "Generate AI image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Get row for processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if data exists1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Channel Configuration": {
      "main": [
        [
          {
            "node": "Generate Video Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Video Content": {
      "main": [
        [
          {
            "node": "Parse Video Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Video Content": {
      "main": [
        [
          {
            "node": "Save to Channel Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Channel Table": {
      "main": [
        [
          {
            "node": "Aggregate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Results": {
      "main": [
        [
          {
            "node": "Create Channel Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload overlay to the server": {
      "main": [
        [
          {
            "node": "Start adding overlay to thevideo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download example overlay": {
      "main": [
        [
          {
            "node": "Upload overlay to the server",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait until the videos gets merged together1": {
      "main": [
        [
          {
            "node": "Get status of the overlay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start adding overlay to thevideo": {
      "main": [
        [
          {
            "node": "Wait until the videos gets merged together1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get status of the overlay": {
      "main": [
        [
          {
            "node": "Overlay status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Overlay status": {
      "main": [
        [
          {
            "node": "Save video id to the db",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait until the videos gets merged together1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Youtube upload": {
      "main": [
        [
          {
            "node": "Download the video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4f4229e0-9a67-405a-bb7d-b4e9db4338bf",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "339979314200287f32affa09285453b9225a94604e8beacf6d02da846d7818bd"
  },
  "id": "x47D030Ik74uZjsL",
  "tags": [
    {
      "createdAt": "2025-06-18T03:10:39.863Z",
      "updatedAt": "2025-06-18T03:10:39.863Z",
      "id": "epUUVeFGLCQqCHkV",
      "name": "GOOD"
    }
  ]
}